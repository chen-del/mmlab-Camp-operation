2023/06/18 16:06:49 - mmengine - INFO - 
------------------------------------------------------------
System environment:
    sys.platform: linux
    Python: 3.8.13 (default, Oct 21 2022, 23:50:54) [GCC 11.2.0]
    CUDA available: True
    numpy_random_seed: 0
    GPU 0: NVIDIA GeForce RTX 3070 Ti Laptop GPU
    CUDA_HOME: /usr/local/cuda
    NVCC: Cuda compilation tools, release 11.4, V11.4.48
    GCC: gcc (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
    PyTorch: 1.10.0+cu111
    PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.1
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.0.5
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.1, CUDNN_VERSION=8.0.5, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

    TorchVision: 0.11.0+cu111
    OpenCV: 4.7.0
    MMEngine: 0.7.4

Runtime environment:
    cudnn_benchmark: True
    mp_cfg: {'mp_start_method': 'fork', 'opencv_num_threads': 0}
    dist_cfg: {'backend': 'nccl'}
    seed: 0
    Distributed launcher: none
    Distributed training: False
    GPU number: 1
------------------------------------------------------------

2023/06/18 16:06:50 - mmengine - INFO - Config:
norm_cfg = dict(type='BN', requires_grad=True)
data_preprocessor = dict(
    type='SegDataPreProcessor',
    mean=[123.675, 116.28, 103.53],
    std=[58.395, 57.12, 57.375],
    bgr_to_rgb=True,
    pad_val=0,
    seg_pad_val=255,
    size=(64, 64))
model = dict(
    type='EncoderDecoder',
    data_preprocessor=dict(
        type='SegDataPreProcessor',
        mean=[123.675, 116.28, 103.53],
        std=[58.395, 57.12, 57.375],
        bgr_to_rgb=True,
        pad_val=0,
        seg_pad_val=255,
        size=(256, 256)),
    pretrained='open-mmlab://resnet50_v1c',
    backbone=dict(
        type='ResNetV1c',
        depth=50,
        num_stages=4,
        out_indices=(0, 1, 2, 3),
        dilations=(1, 1, 2, 4),
        strides=(1, 2, 1, 1),
        norm_cfg=dict(type='BN', requires_grad=True),
        norm_eval=False,
        style='pytorch',
        contract_dilation=True),
    decode_head=dict(
        type='PSPHead',
        in_channels=2048,
        in_index=3,
        channels=512,
        pool_scales=(1, 2, 3, 6),
        dropout_ratio=0.1,
        num_classes=6,
        norm_cfg=dict(type='BN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=1.0)),
    auxiliary_head=dict(
        type='FCNHead',
        in_channels=1024,
        in_index=2,
        channels=256,
        num_convs=1,
        concat_input=False,
        dropout_ratio=0.1,
        num_classes=6,
        norm_cfg=dict(type='BN', requires_grad=True),
        align_corners=False,
        loss_decode=dict(
            type='CrossEntropyLoss', use_sigmoid=False, loss_weight=0.4)),
    train_cfg=dict(),
    test_cfg=dict(mode='whole'))
dataset_type = 'WatermelonDataset'
data_root = '/home/hanhan/cc_wrod/develop/mmlab/mmsegmentation/data/Watermelon87_Semantic_Seg_Mask/'
crop_size = (256, 256)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations'),
    dict(
        type='RandomResize',
        scale=(2048, 1024),
        ratio_range=(0.5, 2.0),
        keep_ratio=True),
    dict(type='RandomCrop', crop_size=(64, 64), cat_max_ratio=0.75),
    dict(type='RandomFlip', prob=0.5),
    dict(type='PhotoMetricDistortion'),
    dict(type='PackSegInputs')
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='Resize', scale=(2048, 1024), keep_ratio=True),
    dict(type='LoadAnnotations'),
    dict(type='PackSegInputs')
]
img_ratios = [0.5, 0.75, 1.0, 1.25, 1.5, 1.75]
tta_pipeline = [
    dict(type='LoadImageFromFile', file_client_args=dict(backend='disk')),
    dict(
        type='TestTimeAug',
        transforms=[[{
            'type': 'Resize',
            'scale_factor': 0.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 0.75,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.0,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.25,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.5,
            'keep_ratio': True
        }, {
            'type': 'Resize',
            'scale_factor': 1.75,
            'keep_ratio': True
        }],
                    [{
                        'type': 'RandomFlip',
                        'prob': 0.0,
                        'direction': 'horizontal'
                    }, {
                        'type': 'RandomFlip',
                        'prob': 1.0,
                        'direction': 'horizontal'
                    }], [{
                        'type': 'LoadAnnotations'
                    }], [{
                        'type': 'PackSegInputs'
                    }]])
]
train_dataloader = dict(
    batch_size=8,
    num_workers=2,
    persistent_workers=True,
    sampler=dict(type='InfiniteSampler', shuffle=True),
    dataset=dict(
        type='WatermelonDataset',
        data_root=
        '/home/hanhan/cc_wrod/develop/mmlab/mmsegmentation/data/Watermelon87_Semantic_Seg_Mask/',
        data_prefix=dict(
            img_path='img_dir/train', seg_map_path='ann_dir/train'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='LoadAnnotations'),
            dict(
                type='RandomResize',
                scale=(2048, 1024),
                ratio_range=(0.5, 2.0),
                keep_ratio=True),
            dict(type='RandomCrop', crop_size=(64, 64), cat_max_ratio=0.75),
            dict(type='RandomFlip', prob=0.5),
            dict(type='PhotoMetricDistortion'),
            dict(type='PackSegInputs')
        ]))
val_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='WatermelonDataset',
        data_root=
        '/home/hanhan/cc_wrod/develop/mmlab/mmsegmentation/data/Watermelon87_Semantic_Seg_Mask/',
        data_prefix=dict(img_path='img_dir/val', seg_map_path='ann_dir/val'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(2048, 1024), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ]))
test_dataloader = dict(
    batch_size=1,
    num_workers=4,
    persistent_workers=True,
    sampler=dict(type='DefaultSampler', shuffle=False),
    dataset=dict(
        type='WatermelonDataset',
        data_root=
        '/home/hanhan/cc_wrod/develop/mmlab/mmsegmentation/data/Watermelon87_Semantic_Seg_Mask/',
        data_prefix=dict(img_path='img_dir/val', seg_map_path='ann_dir/val'),
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', scale=(2048, 1024), keep_ratio=True),
            dict(type='LoadAnnotations'),
            dict(type='PackSegInputs')
        ]))
val_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
test_evaluator = dict(type='IoUMetric', iou_metrics=['mIoU'])
default_scope = 'mmseg'
env_cfg = dict(
    cudnn_benchmark=True,
    mp_cfg=dict(mp_start_method='fork', opencv_num_threads=0),
    dist_cfg=dict(backend='nccl'))
vis_backends = [dict(type='LocalVisBackend')]
visualizer = dict(
    type='SegLocalVisualizer',
    vis_backends=[dict(type='LocalVisBackend')],
    name='visualizer')
log_processor = dict(by_epoch=False)
log_level = 'INFO'
load_from = None
resume = False
tta_model = dict(type='SegTTAModel')
optimizer = dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005)
optim_wrapper = dict(
    type='OptimWrapper',
    optimizer=dict(type='SGD', lr=0.01, momentum=0.9, weight_decay=0.0005),
    clip_grad=None)
param_scheduler = [
    dict(
        type='PolyLR',
        eta_min=0.0001,
        power=0.9,
        begin=0,
        end=40000,
        by_epoch=False)
]
train_cfg = dict(type='IterBasedTrainLoop', max_iters=5000, val_interval=400)
val_cfg = dict(type='ValLoop')
test_cfg = dict(type='TestLoop')
default_hooks = dict(
    timer=dict(type='IterTimerHook'),
    logger=dict(type='LoggerHook', interval=100, log_metric_by_epoch=False),
    param_scheduler=dict(type='ParamSchedulerHook'),
    checkpoint=dict(type='CheckpointHook', by_epoch=False, interval=1500),
    sampler_seed=dict(type='DistSamplerSeedHook'),
    visualization=dict(type='SegVisualizationHook'))
work_dir = './work_dirs/WatermelonDataset'
randomness = dict(seed=0)

2023/06/18 16:06:59 - mmengine - INFO - Distributed training is not used, all SyncBatchNorm (SyncBN) layers in the model will be automatically reverted to BatchNormXd layers if they are used.
2023/06/18 16:06:59 - mmengine - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) RuntimeInfoHook                    
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
before_train:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) DistSamplerSeedHook                
 -------------------- 
before_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_train_iter:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) IterTimerHook                      
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_val_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_val_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_val_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_val_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
(LOW         ) ParamSchedulerHook                 
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
after_train:
(VERY_LOW    ) CheckpointHook                     
 -------------------- 
before_test_epoch:
(NORMAL      ) IterTimerHook                      
 -------------------- 
before_test_iter:
(NORMAL      ) IterTimerHook                      
 -------------------- 
after_test_iter:
(NORMAL      ) IterTimerHook                      
(NORMAL      ) SegVisualizationHook               
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_test_epoch:
(VERY_HIGH   ) RuntimeInfoHook                    
(NORMAL      ) IterTimerHook                      
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
after_run:
(BELOW_NORMAL) LoggerHook                         
 -------------------- 
2023/06/18 16:07:00 - mmengine - WARNING - The prefix is not set in metric class IoUMetric.
2023/06/18 16:07:01 - mmengine - INFO - load model from: open-mmlab://resnet50_v1c
2023/06/18 16:07:01 - mmengine - INFO - Loads checkpoint by openmmlab backend from path: open-mmlab://resnet50_v1c
2023/06/18 16:07:01 - mmengine - WARNING - The model and loaded state dict do not match exactly

unexpected key in source state_dict: fc.weight, fc.bias

Name of parameter - Initialization information

backbone.stem.0.weight - torch.Size([32, 3, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.1.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.1.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.3.weight - torch.Size([32, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.4.weight - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.4.bias - torch.Size([32]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.6.weight - torch.Size([64, 32, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.7.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.stem.7.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.1.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn1.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn1.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn2.weight - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn2.bias - torch.Size([64]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn3.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer1.2.bn3.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.1.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.2.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn1.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn1.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn2.weight - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn2.bias - torch.Size([128]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn3.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer2.3.bn3.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.1.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.2.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.3.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.4.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn1.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn1.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn2.weight - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn2.bias - torch.Size([256]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn3.weight - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer3.5.bn3.bias - torch.Size([1024]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.1.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn1.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn1.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn2.weight - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn2.bias - torch.Size([512]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn3.weight - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

backbone.layer4.2.bn3.bias - torch.Size([2048]): 
PretrainedInit: load from open-mmlab://resnet50_v1c 

decode_head.conv_seg.weight - torch.Size([6, 512, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.conv_seg.bias - torch.Size([6]): 
NormalInit: mean=0, std=0.01, bias=0 

decode_head.psp_modules.0.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.0.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.0.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.1.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.2.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.conv.weight - torch.Size([512, 2048, 1, 1]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.psp_modules.3.1.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.conv.weight - torch.Size([512, 4096, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

decode_head.bottleneck.bn.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

decode_head.bottleneck.bn.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.conv_seg.weight - torch.Size([6, 256, 1, 1]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.conv_seg.bias - torch.Size([6]): 
NormalInit: mean=0, std=0.01, bias=0 

auxiliary_head.convs.0.conv.weight - torch.Size([256, 1024, 3, 3]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  

auxiliary_head.convs.0.bn.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of EncoderDecoder  
2023/06/18 16:07:02 - mmengine - WARNING - "FileClient" will be deprecated in future. Please use io functions in https://mmengine.readthedocs.io/en/latest/api/fileio.html#file-io
2023/06/18 16:07:02 - mmengine - WARNING - "HardDiskBackend" is the alias of "LocalBackend" and the former will be deprecated in future.
2023/06/18 16:07:02 - mmengine - INFO - Checkpoints will be saved to /home/hanhan/cc_wrod/develop/mmlab/mmsegmentation/work_dirs/WatermelonDataset.
2023/06/18 16:07:06 - mmengine - INFO - Exp name: pspseg_r50-d8_4xb2-40k_watermelon_final_20230618_160648
2023/06/18 16:07:06 - mmengine - INFO - Iter(train) [   6/5000]  lr: 9.9989e-03  eta: 1:05:06  time: 0.7822  data_time: 0.0266  memory: 4546  loss: 0.1486  decode.loss_ce: 0.1054  decode.acc_seg: 30.4626  aux.loss_ce: 0.0431  aux.acc_seg: 27.4750
2023/06/18 16:07:39 - mmengine - INFO - Iter(train) [ 100/5000]  lr: 9.9779e-03  eta: 0:30:35  time: 0.3411  data_time: 0.0112  memory: 3774  loss: 0.0717  decode.loss_ce: 0.0494  decode.acc_seg: 77.4384  aux.loss_ce: 0.0223  aux.acc_seg: 81.0120
2023/06/18 16:08:12 - mmengine - INFO - Iter(train) [ 200/5000]  lr: 9.9557e-03  eta: 0:28:20  time: 0.3423  data_time: 0.0119  memory: 3774  loss: 0.0721  decode.loss_ce: 0.0501  decode.acc_seg: 81.2164  aux.loss_ce: 0.0220  aux.acc_seg: 69.4977
2023/06/18 16:08:46 - mmengine - INFO - Iter(train) [ 300/5000]  lr: 9.9334e-03  eta: 0:27:14  time: 0.3249  data_time: 0.0108  memory: 3774  loss: 0.0544  decode.loss_ce: 0.0374  decode.acc_seg: 80.1636  aux.loss_ce: 0.0170  aux.acc_seg: 76.5594
2023/06/18 16:09:20 - mmengine - INFO - Iter(train) [ 400/5000]  lr: 9.9111e-03  eta: 0:26:26  time: 0.3287  data_time: 0.0099  memory: 3774  loss: 0.0672  decode.loss_ce: 0.0482  decode.acc_seg: 84.1949  aux.loss_ce: 0.0190  aux.acc_seg: 81.9611
2023/06/18 16:09:29 - mmengine - INFO - per class results:
2023/06/18 16:09:29 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|    red     | 75.99 | 97.34 |
|   green    | 69.24 | 73.04 |
|   white    |  25.6 | 27.24 |
| seed-black | 23.23 | 24.68 |
| seed-white | 51.14 | 77.63 |
| Unlabeled  |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/18 16:09:29 - mmengine - INFO - Iter(val) [11/11]    aAcc: 80.8200  mIoU: 40.8700  mAcc: 49.9900  data_time: 0.0260  time: 0.8224
2023/06/18 16:10:03 - mmengine - INFO - Iter(train) [ 500/5000]  lr: 9.8888e-03  eta: 0:25:48  time: 0.3390  data_time: 0.0115  memory: 3774  loss: 0.0493  decode.loss_ce: 0.0347  decode.acc_seg: 74.6552  aux.loss_ce: 0.0146  aux.acc_seg: 77.1149
2023/06/18 16:10:36 - mmengine - INFO - Iter(train) [ 600/5000]  lr: 9.8665e-03  eta: 0:25:06  time: 0.3309  data_time: 0.0114  memory: 3774  loss: 0.0540  decode.loss_ce: 0.0388  decode.acc_seg: 80.2643  aux.loss_ce: 0.0152  aux.acc_seg: 82.4615
2023/06/18 16:11:10 - mmengine - INFO - Iter(train) [ 700/5000]  lr: 9.8442e-03  eta: 0:24:29  time: 0.3365  data_time: 0.0107  memory: 3774  loss: 0.0411  decode.loss_ce: 0.0286  decode.acc_seg: 89.8804  aux.loss_ce: 0.0125  aux.acc_seg: 89.7552
2023/06/18 16:11:43 - mmengine - INFO - Iter(train) [ 800/5000]  lr: 9.8218e-03  eta: 0:23:51  time: 0.3271  data_time: 0.0107  memory: 3774  loss: 0.0435  decode.loss_ce: 0.0306  decode.acc_seg: 82.9865  aux.loss_ce: 0.0129  aux.acc_seg: 82.4646
2023/06/18 16:11:46 - mmengine - INFO - per class results:
2023/06/18 16:11:46 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|    red     | 81.53 | 91.61 |
|   green    |  81.5 | 97.23 |
|   white    | 17.97 | 19.52 |
| seed-black | 50.74 | 59.46 |
| seed-white | 64.02 | 74.93 |
| Unlabeled  |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/18 16:11:46 - mmengine - INFO - Iter(val) [11/11]    aAcc: 85.7100  mIoU: 49.2900  mAcc: 57.1300  data_time: 0.0063  time: 0.2263
2023/06/18 16:12:19 - mmengine - INFO - Iter(train) [ 900/5000]  lr: 9.7995e-03  eta: 0:23:15  time: 0.3261  data_time: 0.0108  memory: 3774  loss: 0.0424  decode.loss_ce: 0.0293  decode.acc_seg: 85.7819  aux.loss_ce: 0.0131  aux.acc_seg: 85.5652
2023/06/18 16:12:53 - mmengine - INFO - Exp name: pspseg_r50-d8_4xb2-40k_watermelon_final_20230618_160648
2023/06/18 16:12:53 - mmengine - INFO - Iter(train) [1000/5000]  lr: 9.7772e-03  eta: 0:22:39  time: 0.3422  data_time: 0.0112  memory: 3774  loss: 0.0451  decode.loss_ce: 0.0313  decode.acc_seg: 76.7426  aux.loss_ce: 0.0138  aux.acc_seg: 74.9847
2023/06/18 16:13:27 - mmengine - INFO - Iter(train) [1100/5000]  lr: 9.7549e-03  eta: 0:22:06  time: 0.3302  data_time: 0.0112  memory: 3774  loss: 0.0366  decode.loss_ce: 0.0253  decode.acc_seg: 93.2678  aux.loss_ce: 0.0113  aux.acc_seg: 93.5089
2023/06/18 16:14:01 - mmengine - INFO - Iter(train) [1200/5000]  lr: 9.7325e-03  eta: 0:21:30  time: 0.3386  data_time: 0.0109  memory: 3774  loss: 0.0466  decode.loss_ce: 0.0322  decode.acc_seg: 82.8888  aux.loss_ce: 0.0143  aux.acc_seg: 80.5237
2023/06/18 16:14:03 - mmengine - INFO - per class results:
2023/06/18 16:14:03 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|    red     | 86.43 |  95.4 |
|   green    | 90.45 | 97.65 |
|   white    | 31.19 | 34.16 |
| seed-black | 62.21 | 72.39 |
| seed-white | 65.02 | 72.47 |
| Unlabeled  |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/18 16:14:03 - mmengine - INFO - Iter(val) [11/11]    aAcc: 89.9300  mIoU: 55.8800  mAcc: 62.0100  data_time: 0.0062  time: 0.2348
2023/06/18 16:14:38 - mmengine - INFO - Iter(train) [1300/5000]  lr: 9.7102e-03  eta: 0:20:57  time: 0.3564  data_time: 0.0128  memory: 3774  loss: 0.0397  decode.loss_ce: 0.0281  decode.acc_seg: 73.0560  aux.loss_ce: 0.0116  aux.acc_seg: 69.0826
2023/06/18 16:15:11 - mmengine - INFO - Iter(train) [1400/5000]  lr: 9.6878e-03  eta: 0:20:22  time: 0.3223  data_time: 0.0104  memory: 3774  loss: 0.0441  decode.loss_ce: 0.0311  decode.acc_seg: 73.9471  aux.loss_ce: 0.0130  aux.acc_seg: 73.7274
2023/06/18 16:15:45 - mmengine - INFO - Iter(train) [1500/5000]  lr: 9.6655e-03  eta: 0:19:49  time: 0.3380  data_time: 0.0111  memory: 3774  loss: 0.0534  decode.loss_ce: 0.0379  decode.acc_seg: 75.9766  aux.loss_ce: 0.0155  aux.acc_seg: 73.4772
2023/06/18 16:15:45 - mmengine - INFO - Saving checkpoint at 1500 iterations
2023/06/18 16:16:19 - mmengine - INFO - Iter(train) [1600/5000]  lr: 9.6431e-03  eta: 0:19:15  time: 0.2991  data_time: 0.0090  memory: 3774  loss: 0.0398  decode.loss_ce: 0.0273  decode.acc_seg: 83.6975  aux.loss_ce: 0.0125  aux.acc_seg: 84.8724
2023/06/18 16:16:22 - mmengine - INFO - per class results:
2023/06/18 16:16:22 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|    red     | 84.15 | 92.28 |
|   green    | 85.06 | 98.03 |
|   white    | 32.26 | 38.49 |
| seed-black | 63.54 | 66.91 |
| seed-white | 55.29 | 89.37 |
| Unlabeled  |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/18 16:16:22 - mmengine - INFO - Iter(val) [11/11]    aAcc: 88.2100  mIoU: 53.3800  mAcc: 64.1800  data_time: 0.0061  time: 0.2126
2023/06/18 16:16:52 - mmengine - INFO - Iter(train) [1700/5000]  lr: 9.6207e-03  eta: 0:18:33  time: 0.2957  data_time: 0.0091  memory: 3774  loss: 0.0440  decode.loss_ce: 0.0314  decode.acc_seg: 77.5085  aux.loss_ce: 0.0126  aux.acc_seg: 76.3275
2023/06/18 16:17:25 - mmengine - INFO - Iter(train) [1800/5000]  lr: 9.5983e-03  eta: 0:17:59  time: 0.3346  data_time: 0.0111  memory: 3774  loss: 0.0357  decode.loss_ce: 0.0247  decode.acc_seg: 85.3302  aux.loss_ce: 0.0110  aux.acc_seg: 82.9224
2023/06/18 16:17:58 - mmengine - INFO - Iter(train) [1900/5000]  lr: 9.5760e-03  eta: 0:17:24  time: 0.3295  data_time: 0.0124  memory: 3774  loss: 0.0365  decode.loss_ce: 0.0260  decode.acc_seg: 86.0870  aux.loss_ce: 0.0105  aux.acc_seg: 87.7533
2023/06/18 16:18:31 - mmengine - INFO - Exp name: pspseg_r50-d8_4xb2-40k_watermelon_final_20230618_160648
2023/06/18 16:18:31 - mmengine - INFO - Iter(train) [2000/5000]  lr: 9.5536e-03  eta: 0:16:49  time: 0.3269  data_time: 0.0109  memory: 3774  loss: 0.0319  decode.loss_ce: 0.0221  decode.acc_seg: 90.2313  aux.loss_ce: 0.0098  aux.acc_seg: 85.7117
2023/06/18 16:18:33 - mmengine - INFO - per class results:
2023/06/18 16:18:33 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|    red     | 85.44 | 93.34 |
|   green    | 86.38 | 98.46 |
|   white    | 36.08 | 40.16 |
| seed-black | 64.36 | 71.36 |
| seed-white | 64.58 | 71.11 |
| Unlabeled  |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/18 16:18:33 - mmengine - INFO - Iter(val) [11/11]    aAcc: 89.2600  mIoU: 56.1400  mAcc: 62.4100  data_time: 0.0063  time: 0.2268
2023/06/18 16:19:06 - mmengine - INFO - Iter(train) [2100/5000]  lr: 9.5312e-03  eta: 0:16:14  time: 0.3299  data_time: 0.0108  memory: 3774  loss: 0.0379  decode.loss_ce: 0.0263  decode.acc_seg: 81.9519  aux.loss_ce: 0.0116  aux.acc_seg: 83.1116
2023/06/18 16:19:39 - mmengine - INFO - Iter(train) [2200/5000]  lr: 9.5088e-03  eta: 0:15:39  time: 0.3288  data_time: 0.0102  memory: 3774  loss: 0.0369  decode.loss_ce: 0.0256  decode.acc_seg: 94.6320  aux.loss_ce: 0.0113  aux.acc_seg: 94.2871
2023/06/18 16:20:12 - mmengine - INFO - Iter(train) [2300/5000]  lr: 9.4864e-03  eta: 0:15:05  time: 0.3301  data_time: 0.0107  memory: 3774  loss: 0.0398  decode.loss_ce: 0.0283  decode.acc_seg: 93.0756  aux.loss_ce: 0.0115  aux.acc_seg: 91.8518
2023/06/18 16:20:45 - mmengine - INFO - Iter(train) [2400/5000]  lr: 9.4640e-03  eta: 0:14:31  time: 0.3260  data_time: 0.0099  memory: 3774  loss: 0.0323  decode.loss_ce: 0.0229  decode.acc_seg: 85.2905  aux.loss_ce: 0.0094  aux.acc_seg: 86.2213
2023/06/18 16:20:47 - mmengine - INFO - per class results:
2023/06/18 16:20:47 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|    red     | 82.73 | 90.55 |
|   green    | 81.54 | 99.03 |
|   white    | 33.94 | 36.85 |
| seed-black | 64.39 | 70.69 |
| seed-white | 39.87 | 47.43 |
| Unlabeled  |  0.0  |  0.0  |
+------------+-------+-------+
2023/06/18 16:20:47 - mmengine - INFO - Iter(val) [11/11]    aAcc: 87.3600  mIoU: 50.4100  mAcc: 57.4300  data_time: 0.0063  time: 0.2275
2023/06/18 16:21:20 - mmengine - INFO - Iter(train) [2500/5000]  lr: 9.4416e-03  eta: 0:13:56  time: 0.3159  data_time: 0.0098  memory: 3774  loss: 0.0406  decode.loss_ce: 0.0282  decode.acc_seg: 84.3842  aux.loss_ce: 0.0125  aux.acc_seg: 83.4473
2023/06/18 16:21:53 - mmengine - INFO - Iter(train) [2600/5000]  lr: 9.4191e-03  eta: 0:13:23  time: 0.3374  data_time: 0.0103  memory: 3774  loss: 0.0435  decode.loss_ce: 0.0301  decode.acc_seg: 89.3951  aux.loss_ce: 0.0134  aux.acc_seg: 90.0208
2023/06/18 16:22:26 - mmengine - INFO - Iter(train) [2700/5000]  lr: 9.3967e-03  eta: 0:12:49  time: 0.3171  data_time: 0.0102  memory: 3774  loss: 0.0365  decode.loss_ce: 0.0263  decode.acc_seg: 89.2456  aux.loss_ce: 0.0102  aux.acc_seg: 89.4012
2023/06/18 16:22:59 - mmengine - INFO - Iter(train) [2800/5000]  lr: 9.3743e-03  eta: 0:12:15  time: 0.3380  data_time: 0.0107  memory: 3774  loss: 0.0354  decode.loss_ce: 0.0245  decode.acc_seg: 78.4546  aux.loss_ce: 0.0109  aux.acc_seg: 81.2866
2023/06/18 16:23:02 - mmengine - INFO - per class results:
2023/06/18 16:23:02 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|    red     | 90.12 | 96.09 |
|   green    | 89.73 | 95.27 |
|   white    | 62.75 | 74.43 |
| seed-black | 71.99 | 76.37 |
| seed-white | 57.37 | 64.61 |
| Unlabeled  |  0.33 |  0.33 |
+------------+-------+-------+
2023/06/18 16:23:02 - mmengine - INFO - Iter(val) [11/11]    aAcc: 92.6900  mIoU: 62.0500  mAcc: 67.8500  data_time: 0.0062  time: 0.2304
2023/06/18 16:23:35 - mmengine - INFO - Iter(train) [2900/5000]  lr: 9.3518e-03  eta: 0:11:42  time: 0.3332  data_time: 0.0100  memory: 3774  loss: 0.0408  decode.loss_ce: 0.0287  decode.acc_seg: 79.9713  aux.loss_ce: 0.0121  aux.acc_seg: 79.7516
2023/06/18 16:24:08 - mmengine - INFO - Exp name: pspseg_r50-d8_4xb2-40k_watermelon_final_20230618_160648
2023/06/18 16:24:08 - mmengine - INFO - Iter(train) [3000/5000]  lr: 9.3294e-03  eta: 0:11:08  time: 0.3320  data_time: 0.0104  memory: 3774  loss: 0.0349  decode.loss_ce: 0.0249  decode.acc_seg: 79.9225  aux.loss_ce: 0.0100  aux.acc_seg: 84.7382
2023/06/18 16:24:08 - mmengine - INFO - Saving checkpoint at 3000 iterations
2023/06/18 16:24:44 - mmengine - INFO - Iter(train) [3100/5000]  lr: 9.3069e-03  eta: 0:10:36  time: 0.3315  data_time: 0.0099  memory: 3774  loss: 0.0366  decode.loss_ce: 0.0256  decode.acc_seg: 87.0178  aux.loss_ce: 0.0110  aux.acc_seg: 81.8970
2023/06/18 16:25:17 - mmengine - INFO - Iter(train) [3200/5000]  lr: 9.2845e-03  eta: 0:10:02  time: 0.3316  data_time: 0.0106  memory: 3774  loss: 0.0304  decode.loss_ce: 0.0214  decode.acc_seg: 81.7566  aux.loss_ce: 0.0091  aux.acc_seg: 81.5277
2023/06/18 16:25:19 - mmengine - INFO - per class results:
2023/06/18 16:25:19 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|    red     | 87.07 | 96.44 |
|   green    | 85.46 | 93.61 |
|   white    | 44.71 | 47.82 |
| seed-black | 64.85 | 68.98 |
| seed-white | 59.68 | 65.47 |
| Unlabeled  |  8.36 |  8.41 |
+------------+-------+-------+
2023/06/18 16:25:19 - mmengine - INFO - Iter(val) [11/11]    aAcc: 90.1500  mIoU: 58.3500  mAcc: 63.4600  data_time: 0.0058  time: 0.2303
2023/06/18 16:25:52 - mmengine - INFO - Iter(train) [3300/5000]  lr: 9.2620e-03  eta: 0:09:28  time: 0.3305  data_time: 0.0099  memory: 3774  loss: 0.0355  decode.loss_ce: 0.0251  decode.acc_seg: 81.8359  aux.loss_ce: 0.0104  aux.acc_seg: 84.1644
2023/06/18 16:26:26 - mmengine - INFO - Iter(train) [3400/5000]  lr: 9.2395e-03  eta: 0:08:55  time: 0.3288  data_time: 0.0105  memory: 3774  loss: 0.0336  decode.loss_ce: 0.0239  decode.acc_seg: 93.7378  aux.loss_ce: 0.0097  aux.acc_seg: 93.5974
2023/06/18 16:26:59 - mmengine - INFO - Iter(train) [3500/5000]  lr: 9.2171e-03  eta: 0:08:21  time: 0.3316  data_time: 0.0100  memory: 3774  loss: 0.0343  decode.loss_ce: 0.0243  decode.acc_seg: 79.6478  aux.loss_ce: 0.0100  aux.acc_seg: 79.3335
2023/06/18 16:27:32 - mmengine - INFO - Iter(train) [3600/5000]  lr: 9.1946e-03  eta: 0:07:48  time: 0.3319  data_time: 0.0100  memory: 3774  loss: 0.0317  decode.loss_ce: 0.0225  decode.acc_seg: 90.4846  aux.loss_ce: 0.0092  aux.acc_seg: 88.9587
2023/06/18 16:27:34 - mmengine - INFO - per class results:
2023/06/18 16:27:34 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|    red     | 84.42 | 96.92 |
|   green    | 80.67 |  83.4 |
|   white    | 53.66 | 61.69 |
| seed-black | 61.75 | 67.53 |
| seed-white | 61.49 | 72.12 |
| Unlabeled  |  9.7  |  9.74 |
+------------+-------+-------+
2023/06/18 16:27:34 - mmengine - INFO - Iter(val) [11/11]    aAcc: 88.6000  mIoU: 58.6200  mAcc: 65.2300  data_time: 0.0058  time: 0.2309
2023/06/18 16:28:08 - mmengine - INFO - Iter(train) [3700/5000]  lr: 9.1721e-03  eta: 0:07:14  time: 0.3314  data_time: 0.0098  memory: 3774  loss: 0.0301  decode.loss_ce: 0.0208  decode.acc_seg: 86.7554  aux.loss_ce: 0.0093  aux.acc_seg: 85.3760
2023/06/18 16:28:42 - mmengine - INFO - Iter(train) [3800/5000]  lr: 9.1496e-03  eta: 0:06:41  time: 0.3444  data_time: 0.0114  memory: 3774  loss: 0.0298  decode.loss_ce: 0.0208  decode.acc_seg: 93.0634  aux.loss_ce: 0.0090  aux.acc_seg: 93.0878
2023/06/18 16:29:16 - mmengine - INFO - Iter(train) [3900/5000]  lr: 9.1271e-03  eta: 0:06:08  time: 0.3444  data_time: 0.0121  memory: 3774  loss: 0.0362  decode.loss_ce: 0.0254  decode.acc_seg: 94.7754  aux.loss_ce: 0.0108  aux.acc_seg: 94.4366
2023/06/18 16:29:50 - mmengine - INFO - Exp name: pspseg_r50-d8_4xb2-40k_watermelon_final_20230618_160648
2023/06/18 16:29:50 - mmengine - INFO - Iter(train) [4000/5000]  lr: 9.1046e-03  eta: 0:05:34  time: 0.3291  data_time: 0.0105  memory: 3774  loss: 0.0293  decode.loss_ce: 0.0205  decode.acc_seg: 89.8712  aux.loss_ce: 0.0088  aux.acc_seg: 91.5070
2023/06/18 16:29:52 - mmengine - INFO - per class results:
2023/06/18 16:29:52 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|    red     | 88.37 | 92.82 |
|   green    | 88.69 | 97.71 |
|   white    | 56.92 | 71.11 |
| seed-black | 66.87 | 79.18 |
| seed-white | 53.32 | 56.13 |
| Unlabeled  |  7.89 |  7.9  |
+------------+-------+-------+
2023/06/18 16:29:52 - mmengine - INFO - Iter(val) [11/11]    aAcc: 91.3300  mIoU: 60.3400  mAcc: 67.4700  data_time: 0.0060  time: 0.2283
2023/06/18 16:30:24 - mmengine - INFO - Iter(train) [4100/5000]  lr: 9.0821e-03  eta: 0:05:00  time: 0.3237  data_time: 0.0107  memory: 3774  loss: 0.0370  decode.loss_ce: 0.0261  decode.acc_seg: 87.4298  aux.loss_ce: 0.0109  aux.acc_seg: 86.4746
2023/06/18 16:30:57 - mmengine - INFO - Iter(train) [4200/5000]  lr: 9.0595e-03  eta: 0:04:27  time: 0.3281  data_time: 0.0106  memory: 3774  loss: 0.0230  decode.loss_ce: 0.0160  decode.acc_seg: 90.8356  aux.loss_ce: 0.0070  aux.acc_seg: 90.9271
2023/06/18 16:31:30 - mmengine - INFO - Iter(train) [4300/5000]  lr: 9.0370e-03  eta: 0:03:53  time: 0.3279  data_time: 0.0099  memory: 3774  loss: 0.0341  decode.loss_ce: 0.0238  decode.acc_seg: 84.1125  aux.loss_ce: 0.0104  aux.acc_seg: 85.2081
2023/06/18 16:32:04 - mmengine - INFO - Iter(train) [4400/5000]  lr: 9.0145e-03  eta: 0:03:20  time: 0.3407  data_time: 0.0106  memory: 3774  loss: 0.0359  decode.loss_ce: 0.0253  decode.acc_seg: 73.2300  aux.loss_ce: 0.0106  aux.acc_seg: 72.5830
2023/06/18 16:32:06 - mmengine - INFO - per class results:
2023/06/18 16:32:06 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|    red     |  89.4 | 94.03 |
|   green    | 87.25 | 98.06 |
|   white    |  57.4 | 64.87 |
| seed-black | 74.64 | 81.03 |
| seed-white | 57.96 | 77.84 |
| Unlabeled  |  16.1 | 16.35 |
+------------+-------+-------+
2023/06/18 16:32:06 - mmengine - INFO - Iter(val) [11/11]    aAcc: 91.9800  mIoU: 63.7900  mAcc: 72.0300  data_time: 0.0071  time: 0.2322
2023/06/18 16:32:40 - mmengine - INFO - Iter(train) [4500/5000]  lr: 8.9919e-03  eta: 0:02:47  time: 0.3387  data_time: 0.0113  memory: 3774  loss: 0.0406  decode.loss_ce: 0.0288  decode.acc_seg: 94.5465  aux.loss_ce: 0.0117  aux.acc_seg: 93.8354
2023/06/18 16:32:40 - mmengine - INFO - Saving checkpoint at 4500 iterations
2023/06/18 16:33:14 - mmengine - INFO - Iter(train) [4600/5000]  lr: 8.9694e-03  eta: 0:02:13  time: 0.3242  data_time: 0.0097  memory: 3774  loss: 0.0283  decode.loss_ce: 0.0199  decode.acc_seg: 81.5613  aux.loss_ce: 0.0084  aux.acc_seg: 80.8197
2023/06/18 16:33:47 - mmengine - INFO - Iter(train) [4700/5000]  lr: 8.9468e-03  eta: 0:01:40  time: 0.3207  data_time: 0.0098  memory: 3774  loss: 0.0367  decode.loss_ce: 0.0256  decode.acc_seg: 77.4292  aux.loss_ce: 0.0111  aux.acc_seg: 76.3306
2023/06/18 16:34:19 - mmengine - INFO - Iter(train) [4800/5000]  lr: 8.9243e-03  eta: 0:01:06  time: 0.3292  data_time: 0.0119  memory: 3774  loss: 0.0344  decode.loss_ce: 0.0241  decode.acc_seg: 80.1422  aux.loss_ce: 0.0103  aux.acc_seg: 79.4067
2023/06/18 16:34:22 - mmengine - INFO - per class results:
2023/06/18 16:34:22 - mmengine - INFO - 
+------------+-------+-------+
|   Class    |  IoU  |  Acc  |
+------------+-------+-------+
|    red     | 89.23 | 92.21 |
|   green    | 89.71 | 97.45 |
|   white    |  65.4 | 73.49 |
| seed-black | 60.42 | 86.67 |
| seed-white | 66.85 | 83.63 |
| Unlabeled  | 23.04 | 23.96 |
+------------+-------+-------+
2023/06/18 16:34:22 - mmengine - INFO - Iter(val) [11/11]    aAcc: 91.7700  mIoU: 65.7700  mAcc: 76.2300  data_time: 0.0062  time: 0.2328
2023/06/18 16:34:55 - mmengine - INFO - Iter(train) [4900/5000]  lr: 8.9017e-03  eta: 0:00:33  time: 0.3310  data_time: 0.0107  memory: 3774  loss: 0.0424  decode.loss_ce: 0.0305  decode.acc_seg: 82.8674  aux.loss_ce: 0.0119  aux.acc_seg: 82.3181
2023/06/18 16:35:28 - mmengine - INFO - Exp name: pspseg_r50-d8_4xb2-40k_watermelon_final_20230618_160648
2023/06/18 16:35:28 - mmengine - INFO - Iter(train) [5000/5000]  lr: 8.8791e-03  eta: 0:00:00  time: 0.3191  data_time: 0.0111  memory: 3774  loss: 0.0298  decode.loss_ce: 0.0211  decode.acc_seg: 88.4003  aux.loss_ce: 0.0087  aux.acc_seg: 86.5204
2023/06/18 16:35:28 - mmengine - INFO - Saving checkpoint at 5000 iterations
